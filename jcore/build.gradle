plugins {
    id "org.jetbrains.kotlin.jvm"
}

if (ext.has('jcore_version')) {
    group = "pvt.psk"
    version = "$jcore_version"

    apply plugin: 'maven-publish'
    apply plugin: 'org.jetbrains.dokka'

    dokka {
        outputFormat = 'html'
        outputDirectory = "$buildDir/javadoc"
    }

    task dokkaJar(type: Jar, dependsOn: 'dokka') {
        classifier 'javadoc'
        description = "Assembles Kotlin docs with Dokka"
        group = JavaBasePlugin.DOCUMENTATION_GROUP
        from dokka
    }

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/psk7/jcore")
                credentials {
                    username = "$GITHUB_USER"
                    password = "$GITHUB_KEY"
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact(dokkaJar)
            }
        }
    }

    java {
        withSourcesJar()
    }
}

dependencies {
    //implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    api "org.jetbrains.kotlinx:atomicfu:0.14.2"
    //implementation "com.github.jgonian:commons-ip-math:1.32"

    api "joda-time:joda-time:2.10.5"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.3.4"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.5"
    api "org.koin:koin-core:$koin_version"

    testImplementation "org.koin:koin-test:$koin_version"

    testImplementation('org.junit.jupiter:junit-jupiter-api:5.6.1')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.6.1')

    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation "io.mockk:mockk:1.10.0"
}

compileTestKotlin
{
    kotlinOptions.freeCompilerArgs = ['-Xuse-experimental=kotlinx.serialization.ImplicitReflectionSerializer,kotlinx.coroutines.ObsoleteCoroutinesApi,kotlin.ExperimentalUnsignedTypes']
}

compileKotlin {
    kotlinOptions.freeCompilerArgs = ['-Xuse-experimental=kotlinx.serialization.ImplicitReflectionSerializer,kotlinx.coroutines.ObsoleteCoroutinesApi,kotlin.ExperimentalUnsignedTypes']
}

sourceCompatibility = "8"
targetCompatibility = "8"

/*compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
} */

test {
    useJUnitPlatform {
        //includeTags 'fast'
        //excludeTags 'slow'
    }
}